<!--
 * salesforce data dictionary v0.1
 * prepared by Carl Vescovi, leveraging salesforce-metadata.js by Yuta Minowa, licenced as MIT
 * purpose is to provide a simple way for admins and developers to quickly pull down field data INCLUDING descriptions.
 * Single component footprint to minimise impact on org it is installed in, and simplify installation.
 * v0.1 initial version
 
 
-->



<apex:page doctype="html-5.0" sidebar="false">
    
    <apex:includescript value="https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.js"/>
    <apex:includescript value="https://code.jquery.com/jquery-2.2.0.min.js"/>
    <apex:includeScript value="../../soap/ajax/36.0/connection.js"/>
    <style>
        
        caption { font-weight:bold; font-size:1.2em; padding:20px;}
        
        .btn { display:block; float:left; margin-right:10px;}
    </style>
    
    <script>
        var __sfdcSessionId = '{!GETSESSIONID()}';  
    </script>
    <script src="../../soap/ajax/33.0/connection.js" type="text/javascript"></script>
    
    <table width="100%" height="700px;">
        <tr>
             <td colspan="2">
                    <h1>Data Dictionary</h1><br/>
             </td>
        </tr>
        <tr>
             <td width="30%">
                
                  <p>Select objects to include in retrieval</p>
                    <select id="objects" multiple="multiple" size="40">
                    </select><br/><br/>
                <button id="genBtn" onclick="submitRequest()">Generate Dictionary</button> 
                <img id="genSpinner" src="/img/loading.gif" style="display:none;"/>
                <button id="renderBtn" onclick="renderAsText()" style="display:none;">Print results</button>
             </td>
             <td>
                <br/>
                <div id="result" style="overflow-y:scroll;max-height:700px;padding:10px;"/>
                
             </td>
        </tr>
    </table>
    
                    
                
    <script>
        
            
        /***************************/
        /*
        salesforce-metadata.js v0.1.0
        Copyright (c) 2012 Yuta Minowa
        Licensed under the MIT license
        https://github.com/mino0123/salesforce-metadata.js/LICENSE
        */
        /*jslint nomen: true */
        /*global sforce */
            (function () {
        "use strict";
    
        if (typeof sforce === "undefined" || !sforce.Connection) {
            throw new Error("connection.js not loaded.");
        }
    
        

        sforce.MetadataConnection = function () {};
    
        sforce.MetadataConnection.prototype = new sforce.Connection();
    
        sforce.MetadataConnection.prototype.metadataNs = "http://soap.sforce.com/2006/04/metadata";
        sforce.MetadataConnection.prototype.metadataNsPrefix = "m";
        sforce.MetadataConnection.prototype.xsiNs = "http://www.w3.org/2001/XMLSchema-instance";
    
        sforce.MetadataConnection.prototype.create = function (metadataArray, callback) {
            var arg = new sforce.internal.Parameter("metadata", metadataArray, true);
            return this._invoke("create", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.update = function (metadataArray, callback) {
            var arg = new sforce.internal.Parameter("updateMetadata", metadataArray, true);
            return this._invoke("update", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.deleteMetadata = function (metadataArray, callback) {
            var arg = new sforce.internal.Parameter("metadata", metadataArray, true);
            return this._invoke("delete", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.checkStatus = function (asyncIds, callback) {
            var arg = new sforce.internal.Parameter("asyncProcessId", asyncIds, true);
            return this._invoke("checkStatus", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.describeMetadata = function (version, callback) {
            var arg = new sforce.internal.Parameter("asOfVersion", version, false);
            return this._invoke("describeMetadata", [arg], false, callback);
        };
    
        sforce.MetadataConnection.prototype.listMetadata = function (request, callback) {
            var args, queries, asOfVersion;
            args = [];
            queries = request.queries.map(function (q) {
                var xml = new sforce.Xml();
                xml._xsiType = "queries";
                xml.type = q.type;
                xml.folder = q.folder;
                return xml;
            });
            args.push(new sforce.internal.Parameter("queries", queries, true));
            asOfVersion = request.asOfVersion;
            if (typeof asOfVersion === "number") {
                args.push(new sforce.internal.Parameter("asOfVersion", asOfVersion, false));
            }
            return this._invoke("listMetadata", args, true, callback);
        };
    
        sforce.MetadataConnection.prototype.retrieve = function (req, callback) {
            var arg = new sforce.internal.Parameter("retrieveRequest", req, false);
            return this._invoke("retrieve", [arg], false, callback);
        };
    
        sforce.MetadataConnection.prototype.checkRetrieveStatus = function (asyncId, callback) {
            var arg = new sforce.internal.Parameter("asyncProcessId", asyncId, false);
            return this._invoke("checkRetrieveStatus", [arg], false, callback);
        };
    
        sforce.MetadataConnection.prototype.deploy = function (req, callback) {
            var args = [];
            args.push(new sforce.internal.Parameter("zipFile", req.zipFile, false));
            if (req.deployOptions) {
                args.push(new sforce.internal.Parameter("deployOptions", req.deployOptions, false));
            }
            return this._invoke("deploy", args, false, callback);
        };
    
        sforce.MetadataConnection.prototype.checkDeployStatus = function (asyncId, callback) {
            var args = [];
            args.push(new sforce.internal.Parameter("asyncProcessId", asyncId, false));
            args.push(new sforce.internal.Parameter("includeDetails", true, false));
            return this._invoke("checkDeployStatus", args, false, callback);
        };
    
        sforce.MetadataConnection.prototype.startEnvelope = function (w) {
            w.startEnvelope();
            w.writeNamespace(this.xsiNs, "xsi");
            w.writeNamespace(this.metadataNs, this.metadataNsPrefix);
            w.writeNamespace(this.sforceNs, "p");
        };
    
        sforce.MetadataConnection.prototype.writeHeader = function (w, ns) {
            var soapNS = sforce.XmlWriter.prototype.soapNS;
            w.writeStartElement("Header", soapNS);
            w.writeStartElement("SessionHeader", this.metadataNs);
            w.writeStartElement("sessionId", this.sforceNs);
            w.writeText(this.sessionId);
            w.writeEndElement("sessionId", this.sforceNs);
            w.writeEndElement("SessionHeader", this.metadataNs);
            w.writeEndElement("Header", soapNS);
        };
    
        sforce.MetadataConnection.prototype._invoke = function (method, args, isArray, callback) {
            this.validateCallback(callback);
    
            var writer = new sforce.XmlWriter(),
                transport;
            this.startEnvelope(writer);
            this.writeHeader(writer, this.metadataNs);
    
            writer.startBody();
            writer.writeStartElement(method, this.metadataNs);
    
            this.validateArgs(args);
            this.writeArguments(writer, args, this.metadataNs);
    
            writer.writeEndElement(method, this.metadataNs);
            writer.endBody();
            writer.endEnvelope();
    
            transport = new sforce.SoapTransport();
            return transport.send(this.serverUrl, writer, isArray, callback);
        };
    
        sforce.MetadataConnection.prototype.validateCallback = function (callback) {
            if (callback) {
                if (typeof callback !== "function") {
                    if (!callback.onSuccess) {
                        throw new Error("onSuccess not defined in the callback");
                    }
                    if (!callback.onFailure) {
                        throw new Error("onFailure not defined in the callback");
                    }
                }
            }
        };
    
        sforce.MetadataConnection.prototype.validateArgs = function (args) {
            var i,
                len = args.length,
                arg,
                isArray,
                name,
                value,
                valueIsArray;
            for (i = 0; i < len; i += 1) {
                arg = args[i];
                isArray = arg.isArray;
                name = arg.name;
                value = arg.value;
                valueIsArray = Array.isArray(value);
                if (value !== null) {
                    if (isArray && !valueIsArray) {
                        throw new Error("arg " + i + " '" + name + "' is an array. But passed in value is not an array");
                    }
                    if (!isArray && valueIsArray) {
                        throw new Error("arg " + i + " '" + name + "' is not an array. But passed in value is an array");
                    }
                }
            }
        };
    
        sforce.MetadataConnection.prototype.writeArguments = function (writer, args, namespace) {
            var i, len, arg, name, value;
            len = args.length;
            for (i = 0; i < len; i += 1) {
                arg = args[i];
                name = arg.name;
                value = arg.value;
                if (value === null) {
                    this.writeOne(writer, name, null, namespace);
                } else if (Array.isArray(value)) {
                    this.writeArrayArgument(writer, name, value, namespace);
                } else {
                    this.writeOne(writer, name, value, namespace);
                }
            }
        };
    
        sforce.MetadataConnection.prototype.writeArrayArgument = function (writer, name, arr, namespace) {
            var i, len, obj;
            len = arr.length;
            for (i = 0; i < len; i += 1) {
                obj = arr[i];
                if (!obj) {
                    throw new Error("Array element at " + i + " is null.");
                }
                this.writeOne(writer, name, obj, namespace);
            }
        };
    
    
        sforce.Metadata = function (type) {
            this._xsiType = type;
        };
    
        sforce.Metadata.prototype = new sforce.Xml();
    
        sforce.Metadata.prototype.toXml = function (sobjectNs, name, writer) {
            writer.writeStartElement(name, sobjectNs);
            if (this._xsiType) {
                writer.writeXsiType(sforce.MetadataConnection.prototype.metadataNsPrefix + ":" + this._xsiType);
            }
            this.writeObject(null, this, writer);
            writer.writeEndElement(name, sobjectNs);
        };
    
        sforce.Metadata.prototype.writeValue = function (name, obj, writer) {
            if (obj === null) {
                writer.writeNameValueNode(name, null);
            } else if (obj instanceof sforce.Base64Binary) {
                this.writeString(name, obj.toString(), writer);
            } else if (Array.isArray(obj)) {
                this.writeArray(name, obj, writer);
            } else if (typeof obj === "object") {
                this.writeObject(name, obj, writer);
            } else {
                this.writeString(name, obj, writer);
            }
        };
    
        sforce.Metadata.prototype.writeObject = function (name, obj, writer) {
            var keys, len, i, k, v;
            keys = this.getKeys(obj);
            len = keys.length;
            if (name) {
                writer.writeStartElement(name);
            }
            for (i = 0; i < len; i += 1) {
                k = keys[i];
                v = obj[k];
                this.writeValue(k, v, writer);
            }
            if (name) {
                writer.writeEndElement(name);
            }
        };
    
        sforce.Metadata.prototype.writeArray = function (name, arr, writer) {
            var len, i;
            len = arr.length;
            for (i = 0; i < len; i += 1) {
                this.writeValue(name, arr[i], writer);
            }
        };
    
        sforce.Metadata.prototype.writeString = function (name, value, writer) {
            writer.writeStartElement(name);
            writer.writeText(value);
            writer.writeEndElement(name);
        };
    
        sforce.Metadata.prototype.getKeys = function (obj) {
            function isNotMetaProperty(name) {
                return name.indexOf("_") !== 0;
            }
            function isNotFunction(name) {
                return typeof obj[name] !== "function";
            }
            var keys = Object.keys(obj);
            return keys.filter(isNotMetaProperty).filter(isNotFunction);
        };
    
    
        sforce.UpdateMetadata = function (metadata) {
            this.metadata = metadata;
        };
        sforce.UpdateMetadata.prototype = new sforce.Xml();
        sforce.UpdateMetadata.prototype._xsiType = "UpdateMetadata";
    
        sforce.RetrieveRequest = function () {};
        sforce.RetrieveRequest.prototype = new sforce.Metadata("RetrieveRequest");
    
        sforce.DeployRequest = function () {};
        sforce.DeployRequest.prototype = new sforce.Metadata("DeployRequest");
    
    
        sforce.Package = function (opt_obj) {
            opt_obj = opt_obj || {};
            this.types = opt_obj.types || [];
            this.version = opt_obj.version || null;
        };
        sforce.Package.prototype = new sforce.Metadata();
        sforce.Package.prototype._toXml = sforce.Package.prototype.toXml;
        sforce.Package.prototype.toXml = function () {
            var w;
            w = new sforce.XmlWriter();
            this._toXml(null, "Package", w);
            return w.toString();
        };
        sforce.Package.toXml = function (obj) {
            return new sforce.Package(obj).toXml();
        };
    
        sforce.MetaXml = function (_metadataType) {
            this._metadataType = _metadataType;
        };
        sforce.MetaXml.prototype = new sforce.Metadata();
        sforce.MetaXml.prototype._toXml = sforce.MetaXml.prototype.toXml;
        sforce.MetaXml.prototype.toXml = function () {
            var w;
            w = new sforce.XmlWriter();
            this._toXml(null, this._metadataType, w);
            return w.toString();
        };
        sforce.MetaXml.getKeys = sforce.MetaXml.prototype.getKeys;
        sforce.MetaXml.toXml = function (obj) {
            var m, keys, i, len, k;
            m = new sforce.MetaXml(obj._metadataType);
            keys = this.getKeys(obj);
            len = keys.length;
            for (i = 0; i < len; i += 1) {
                k = keys[i];
                m[k] = obj[k];
            }
            return m.toXml();
        };
    
    
        sforce.metadata = new sforce.MetadataConnection();
        sforce.metadata.serverUrl = "/services/Soap/m/26.0";
        sforce.metadata.sessionId = sforce.connection.sessionId;
    
    
    }());
        
        
        /*************************** end salesforce-metadata.js **/
        var text;
        
        function renderAsText() {
            
            var textList = text.split('<br/>');
            textList.sort();
            text = '<style> body { font-family: "Lucida Console", Monaco, monospace; }</style>';
            
            
            text += $("#result").html();
            
            text += '</body>';
            presentText();
        }
        
        
        function presentText(){
            newwindow=window.open();
            newdocument=newwindow.document;
            newdocument.write(text);
        }
        
        
        function submitRequest(){
           
           $('#renderBtn').hide();
           $('#genBtn').hide();
           $('#genSpinner').show();
            
           document.getElementById('result').innerHTML = "";
           var selectVals = document.getElementById('objects');
           var selected = [];
           var selectedString = '';
           for(var s=0; s<selectVals.length; s++){
                if(selectVals.options[s].selected) {
                    selected.push(selectVals.options[s].value);
                    
                }
           }
           var targetArray = selected;  
           var ind = 0;
           text = '';
           
           // retrieve the description data via metadata api

           var req, result;
            req = new sforce.RetrieveRequest();
            req.apiVersion = "33.0";
            req.singlePackage = false;
            req.unpackaged = {
                types: [{name: "CustomObject", members:targetArray },{name:"CustomField", members:["*"]}]
            };

            sforce.metadata.retrieve(req, waitForDone(function (result) {
            
            zip = new JSZip(result.zipFile, {base64:true});
            
            var finalResults = document.createElement("span");
            var elements = [];
            var ajaxres = [];
            for(obj = 0; obj < targetArray.length; obj++){
                
                // metadata api retrieve
                var res = zip.file("unpackaged/objects/"+targetArray[obj]+".object").asText();
                
                // ajax object describe
                try { 
                    ajaxres = sforce.connection.describeSObject(targetArray[obj]);
                } catch (err){ ajaxres.fields = {}}


                // metadata retrieve into xml object for traverse into UI table

                parser = new DOMParser();
                xmlDoc = parser.parseFromString(res,"text/xml");
                
                xmlj = $.parseXML(res);
                $xml = $(xmlj);


console.log('objo',xmlDoc);
                
                
                
                // object title and table header row from metadata retrieve
                
                var objTable = document.createElement("table");
                objTable.setAttribute("style","width:100%;border:solid 1px;");
                objTable.setAttribute("id","table:" + targetArray[obj]);


                objLabel = $xml.find('customobject > label').text();
                if(objLabel == '') objLabel = targetArray[obj];
                var cap = document.createElement("caption");
                cap.appendChild(document.createTextNode(objLabel));
                objTable.appendChild(cap);
                
                // add object description
                
                objDesc = $xml.find('customobject > description').text();
                objDesc = (objDesc == '') ? 'No description available' : objDesc;
                
                var row = document.createElement("tr");
                var cell = document.createElement("td");
                cell.setAttribute("colspan","4");
                cell.setAttribute("style","text-align:center;font-weight:bold;padding:10px;border-bottom: solid 1px;");
                cell.appendChild(document.createTextNode(objDesc));
                row.appendChild(cell);
                objTable.appendChild(row);
                
                
                // add header row
                
                var hdr = document.createElement("tr");
                appendElement(hdr,"th","Label","width:30%;");
                appendElement(hdr,"th","API Name","width:15%;");
                appendElement(hdr,"th","Type","width:15%;");
                appendElement(hdr,"th","Description","");
                objTable.appendChild(hdr);
                
                
                
                // build out the fields and info retrieved via metadata api
                
                
                $($xml).find('fields').each(function(i){
                    row = document.createElement("tr");
                    key = targetArray[obj]+':' + $(this).children('fullname').text();
                    row.setAttribute("id",key);
                    elements.push(key);

                    // if no label then means using standard full api name
                    var label = $(this).children('fullname').text();
                    if($(this).children('label').text() > '') label = $(this).children('label').text();
                    appendElement(row,"td", label,"");
                    appendElement(row,"td", $(this).children('fullname').text(),"");
                    appendElement(row,"td", $(this).children('type').text(),"");
                    appendElement(row,"td", $(this).children('description').text(),"");
                    objTable.appendChild(row);
                })
                finalResults.appendChild(objTable);
                finalResults.appendChild(document.createElement('br'));
                finalResults.appendChild(document.createElement('br'));
            
                // now embed the standard fields not included with metadata retrieve into the object table

                for (var i=0; i<ajaxres.fields.length; i++) {
                    var field = ajaxres.fields[i];
                    key = targetArray[obj]+':'+ field.name;
                    if(!contains.call(elements, key)){
                        // doesnt exist yet so create the line in table
                        row = document.createElement("tr");
                        row.setAttribute("id",key);
                        elements.push(key);
                        appendElement(row,"td", field.label,"");
                        appendElement(row,"td", field.name,"");
                        appendElement(row,"td", field.type,"");
                        appendElement(row,"td", 'standard field',"");
                        objTable.appendChild(row);

                    }
                }

            }

            


            // append final result into UI
            
            document.getElementById("result").appendChild(finalResults);
            if($("#result").children().length > 0){
                $("#renderBtn").show();
            } else {
                $("#renderBtn").hide();
            }
            $('#genBtn').show();
           $('#genSpinner').hide();
           $("#result > tr:even").css("background-color", "#000000");
        }));
          
            
        }
        
        
        
        // copied from stackexchange post - cant find the url to credit!
        
        var contains = function(needle) {
            // Per spec, the way to identify NaN is that it is not equal to itself
            var findNaN = needle !== needle;
            var indexOf;

            if(!findNaN && typeof Array.prototype.indexOf === 'function') {
                indexOf = Array.prototype.indexOf;
            } else {
                indexOf = function(needle) {
                    var i = -1, index = -1;

                    for(i = 0; i < this.length; i++) {
                        var item = this[i];

                        if((findNaN && item !== item) || item === needle) {
                            index = i;
                            break;
                        }
                    }

                    return index;
                };
            }

        return indexOf.call(this, needle) > -1;
        };

        
        function waitForDone(callback) {
            function getResult(id) {
                sforce.metadata.checkRetrieveStatus(id, callback);
            }
            function check(results) {
                var done = results[0].getBoolean("done");
                if (!done) {
                    sforce.metadata.checkStatus([results[0].id], check);
                } else {
                    getResult(results[0].id);
                }
            }
            return function (result) {
                check([result]);
            };
        }

        function appendElement(parentNode, nodeType, nodeText, styleText){
            
            newCol = document.createElement(nodeType);
            if(styleText != '') newCol.setAttribute("style",styleText);
            newCol.appendChild(document.createTextNode(nodeText));
            parentNode.appendChild(newCol);
            
        }
        
        
        // generate selection panel
        //
        sforce.metadata.listMetadata({queries:[{type:'CustomObject'}], asOfVersion:33 }, function (results) {
            var optionsList = [];
            for(var i=0; i<results.length; i++){
                optionsList.push(results[i].fullName);
                

            }
            optionsList.sort();
            // now build select out
            var selectNode = document.getElementById('objects');
            for(var i=0; i<optionsList.length; i++){
                var optionNode = document.createElement('OPTION');
                optionNode.setAttribute('value',optionsList[i]);
                var textNode = document.createTextNode(optionsList[i]);
                optionNode.appendChild(textNode);
                selectNode.appendChild(optionNode); 
                
            }
        });





    </script>
</apex:page>