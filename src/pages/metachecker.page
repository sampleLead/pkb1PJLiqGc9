<!--
 * salesforce metachecker v0.2
 * prepared by Carl Vescovi, leveraging salesforce-metadata.js by Yuta Minowa, licenced as MIT
 * purpose is to provide a simple way for admins and developers to quickly identify changes made to org metadata.
 * Single component footprint to minimise impact on org it is installed in, and simplify installation.
 * v0.1 initial version
 * v0.2 added package.xml generation, to assist deployment via ANT
 
-->



<apex:page doctype="html-5.0" sidebar="false">
    <style>
        #result > ul { font-weight: bold; list-style-type: square;}
        #result > ul > li { font-weight: normal;  }
        #result { font-family: "Lucida Console", Monaco, monospace; }
        .btn { display:block; float:left; margin-right:10px;}
    </style>
    
    <script>
        var __sfdcSessionId = '{!GETSESSIONID()}';  
    </script>
    <script src="../../soap/ajax/33.0/connection.js" type="text/javascript"></script>
    <table width="100%" height="100%">
        <tr>
             <td colspan="2">
                    <h1>metaChecker</h1><br/>
                    <p>To list all metadata leave the input field blank.<br/>To filter metadata results to changes or additions made between now and a specific date and time, provide the start datetime in field provided.</p>
             </td>
        </tr>
        <tr>
             <td width="30%">
                <p>
                  <input type="datetime" id="dt"/>
                  <label for="dt">Date time format YYYY-MM-DDTHH:MM:SSZ</label>
                </p>
                  <p>Select metadata types to include in scope of analysis</p>
                    <select id="objects" multiple="multiple" size="30">
                    </select><br/><br/>
                <button onclick="submitRequest()">Search Metadata</button> 
             </td>
             <td>
                <br/>
                <div id="result" style="overflow-y:scroll;height:500px;"></div>
                <div>
                    <button id="renderAsText" class="btn" onclick="renderAsText()">Printable view</button>
                    <button id="renderAsPackageXML" class="btn" onclick="renderAsPackageXML()">Package.xml view</button>
                </div>
             </td>
        </tr>
    </table>
    <script>
        
            
        /***************************/
        /*
        salesforce-metadata.js v0.1.0
        Copyright (c) 2012 Yuta Minowa
        Licensed under the MIT license
        https://github.com/mino0123/salesforce-metadata.js/LICENSE
        */
        /*jslint nomen: true */
        /*global sforce */
            (function () {
        "use strict";
    
        if (typeof sforce === "undefined" || !sforce.Connection) {
            throw new Error("connection.js not loaded.");
        }
    
        sforce.MetadataConnection = function () {};
    
        sforce.MetadataConnection.prototype = new sforce.Connection();
    
        sforce.MetadataConnection.prototype.metadataNs = "http://soap.sforce.com/2006/04/metadata";
        sforce.MetadataConnection.prototype.metadataNsPrefix = "m";
        sforce.MetadataConnection.prototype.xsiNs = "http://www.w3.org/2001/XMLSchema-instance";
    
        sforce.MetadataConnection.prototype.create = function (metadataArray, callback) {
            var arg = new sforce.internal.Parameter("metadata", metadataArray, true);
            return this._invoke("create", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.update = function (metadataArray, callback) {
            var arg = new sforce.internal.Parameter("updateMetadata", metadataArray, true);
            return this._invoke("update", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.deleteMetadata = function (metadataArray, callback) {
            var arg = new sforce.internal.Parameter("metadata", metadataArray, true);
            return this._invoke("delete", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.checkStatus = function (asyncIds, callback) {
            var arg = new sforce.internal.Parameter("asyncProcessId", asyncIds, true);
            return this._invoke("checkStatus", [arg], true, callback);
        };
    
        sforce.MetadataConnection.prototype.describeMetadata = function (version, callback) {
            var arg = new sforce.internal.Parameter("asOfVersion", version, false);
            return this._invoke("describeMetadata", [arg], false, callback);
        };
    
        sforce.MetadataConnection.prototype.listMetadata = function (request, callback) {
            var args, queries, asOfVersion;
            args = [];
            queries = request.queries.map(function (q) {
                var xml = new sforce.Xml();
                xml._xsiType = "queries";
                xml.type = q.type;
                xml.folder = q.folder;
                return xml;
            });
            args.push(new sforce.internal.Parameter("queries", queries, true));
            asOfVersion = request.asOfVersion;
            if (typeof asOfVersion === "number") {
                args.push(new sforce.internal.Parameter("asOfVersion", asOfVersion, false));
            }
            return this._invoke("listMetadata", args, true, callback);
        };
    
        sforce.MetadataConnection.prototype.retrieve = function (req, callback) {
            var arg = new sforce.internal.Parameter("retrieveRequest", req, false);
            return this._invoke("retrieve", [arg], false, callback);
        };
    
        sforce.MetadataConnection.prototype.checkRetrieveStatus = function (asyncId, callback) {
            var arg = new sforce.internal.Parameter("asyncProcessId", asyncId, false);
            return this._invoke("checkRetrieveStatus", [arg], false, callback);
        };
    
        sforce.MetadataConnection.prototype.deploy = function (req, callback) {
            var args = [];
            args.push(new sforce.internal.Parameter("zipFile", req.zipFile, false));
            if (req.deployOptions) {
                args.push(new sforce.internal.Parameter("deployOptions", req.deployOptions, false));
            }
            return this._invoke("deploy", args, false, callback);
        };
    
        sforce.MetadataConnection.prototype.checkDeployStatus = function (asyncId, callback) {
            var args = [];
            args.push(new sforce.internal.Parameter("asyncProcessId", asyncId, false));
            args.push(new sforce.internal.Parameter("includeDetails", true, false));
            return this._invoke("checkDeployStatus", args, false, callback);
        };
    
        sforce.MetadataConnection.prototype.startEnvelope = function (w) {
            w.startEnvelope();
            w.writeNamespace(this.xsiNs, "xsi");
            w.writeNamespace(this.metadataNs, this.metadataNsPrefix);
            w.writeNamespace(this.sforceNs, "p");
        };
    
        sforce.MetadataConnection.prototype.writeHeader = function (w, ns) {
            var soapNS = sforce.XmlWriter.prototype.soapNS;
            w.writeStartElement("Header", soapNS);
            w.writeStartElement("SessionHeader", this.metadataNs);
            w.writeStartElement("sessionId", this.sforceNs);
            w.writeText(this.sessionId);
            w.writeEndElement("sessionId", this.sforceNs);
            w.writeEndElement("SessionHeader", this.metadataNs);
            w.writeEndElement("Header", soapNS);
        };
    
        sforce.MetadataConnection.prototype._invoke = function (method, args, isArray, callback) {
            this.validateCallback(callback);
    
            var writer = new sforce.XmlWriter(),
                transport;
            this.startEnvelope(writer);
            this.writeHeader(writer, this.metadataNs);
    
            writer.startBody();
            writer.writeStartElement(method, this.metadataNs);
    
            this.validateArgs(args);
            this.writeArguments(writer, args, this.metadataNs);
    
            writer.writeEndElement(method, this.metadataNs);
            writer.endBody();
            writer.endEnvelope();
    
            transport = new sforce.SoapTransport();
            return transport.send(this.serverUrl, writer, isArray, callback);
        };
    
        sforce.MetadataConnection.prototype.validateCallback = function (callback) {
            if (callback) {
                if (typeof callback !== "function") {
                    if (!callback.onSuccess) {
                        throw new Error("onSuccess not defined in the callback");
                    }
                    if (!callback.onFailure) {
                        throw new Error("onFailure not defined in the callback");
                    }
                }
            }
        };
    
        sforce.MetadataConnection.prototype.validateArgs = function (args) {
            var i,
                len = args.length,
                arg,
                isArray,
                name,
                value,
                valueIsArray;
            for (i = 0; i < len; i += 1) {
                arg = args[i];
                isArray = arg.isArray;
                name = arg.name;
                value = arg.value;
                valueIsArray = Array.isArray(value);
                if (value !== null) {
                    if (isArray && !valueIsArray) {
                        throw new Error("arg " + i + " '" + name + "' is an array. But passed in value is not an array");
                    }
                    if (!isArray && valueIsArray) {
                        throw new Error("arg " + i + " '" + name + "' is not an array. But passed in value is an array");
                    }
                }
            }
        };
    
        sforce.MetadataConnection.prototype.writeArguments = function (writer, args, namespace) {
            var i, len, arg, name, value;
            len = args.length;
            for (i = 0; i < len; i += 1) {
                arg = args[i];
                name = arg.name;
                value = arg.value;
                if (value === null) {
                    this.writeOne(writer, name, null, namespace);
                } else if (Array.isArray(value)) {
                    this.writeArrayArgument(writer, name, value, namespace);
                } else {
                    this.writeOne(writer, name, value, namespace);
                }
            }
        };
    
        sforce.MetadataConnection.prototype.writeArrayArgument = function (writer, name, arr, namespace) {
            var i, len, obj;
            len = arr.length;
            for (i = 0; i < len; i += 1) {
                obj = arr[i];
                if (!obj) {
                    throw new Error("Array element at " + i + " is null.");
                }
                this.writeOne(writer, name, obj, namespace);
            }
        };
    
    
        sforce.Metadata = function (type) {
            this._xsiType = type;
        };
    
        sforce.Metadata.prototype = new sforce.Xml();
    
        sforce.Metadata.prototype.toXml = function (sobjectNs, name, writer) {
            writer.writeStartElement(name, sobjectNs);
            if (this._xsiType) {
                writer.writeXsiType(sforce.MetadataConnection.prototype.metadataNsPrefix + ":" + this._xsiType);
            }
            this.writeObject(null, this, writer);
            writer.writeEndElement(name, sobjectNs);
        };
    
        sforce.Metadata.prototype.writeValue = function (name, obj, writer) {
            if (obj === null) {
                writer.writeNameValueNode(name, null);
            } else if (obj instanceof sforce.Base64Binary) {
                this.writeString(name, obj.toString(), writer);
            } else if (Array.isArray(obj)) {
                this.writeArray(name, obj, writer);
            } else if (typeof obj === "object") {
                this.writeObject(name, obj, writer);
            } else {
                this.writeString(name, obj, writer);
            }
        };
    
        sforce.Metadata.prototype.writeObject = function (name, obj, writer) {
            var keys, len, i, k, v;
            keys = this.getKeys(obj);
            len = keys.length;
            if (name) {
                writer.writeStartElement(name);
            }
            for (i = 0; i < len; i += 1) {
                k = keys[i];
                v = obj[k];
                this.writeValue(k, v, writer);
            }
            if (name) {
                writer.writeEndElement(name);
            }
        };
    
        sforce.Metadata.prototype.writeArray = function (name, arr, writer) {
            var len, i;
            len = arr.length;
            for (i = 0; i < len; i += 1) {
                this.writeValue(name, arr[i], writer);
            }
        };
    
        sforce.Metadata.prototype.writeString = function (name, value, writer) {
            writer.writeStartElement(name);
            writer.writeText(value);
            writer.writeEndElement(name);
        };
    
        sforce.Metadata.prototype.getKeys = function (obj) {
            function isNotMetaProperty(name) {
                return name.indexOf("_") !== 0;
            }
            function isNotFunction(name) {
                return typeof obj[name] !== "function";
            }
            var keys = Object.keys(obj);
            return keys.filter(isNotMetaProperty).filter(isNotFunction);
        };
    
    
        sforce.UpdateMetadata = function (metadata) {
            this.metadata = metadata;
        };
        sforce.UpdateMetadata.prototype = new sforce.Xml();
        sforce.UpdateMetadata.prototype._xsiType = "UpdateMetadata";
    
        sforce.RetrieveRequest = function () {};
        sforce.RetrieveRequest.prototype = new sforce.Metadata("RetrieveRequest");
    
        sforce.DeployRequest = function () {};
        sforce.DeployRequest.prototype = new sforce.Metadata("DeployRequest");
    
    
        sforce.Package = function (opt_obj) {
            opt_obj = opt_obj || {};
            this.types = opt_obj.types || [];
            this.version = opt_obj.version || null;
        };
        sforce.Package.prototype = new sforce.Metadata();
        sforce.Package.prototype._toXml = sforce.Package.prototype.toXml;
        sforce.Package.prototype.toXml = function () {
            var w;
            w = new sforce.XmlWriter();
            this._toXml(null, "Package", w);
            return w.toString();
        };
        sforce.Package.toXml = function (obj) {
            return new sforce.Package(obj).toXml();
        };
    
        sforce.MetaXml = function (_metadataType) {
            this._metadataType = _metadataType;
        };
        sforce.MetaXml.prototype = new sforce.Metadata();
        sforce.MetaXml.prototype._toXml = sforce.MetaXml.prototype.toXml;
        sforce.MetaXml.prototype.toXml = function () {
            var w;
            w = new sforce.XmlWriter();
            this._toXml(null, this._metadataType, w);
            return w.toString();
        };
        sforce.MetaXml.getKeys = sforce.MetaXml.prototype.getKeys;
        sforce.MetaXml.toXml = function (obj) {
            var m, keys, i, len, k;
            m = new sforce.MetaXml(obj._metadataType);
            keys = this.getKeys(obj);
            len = keys.length;
            for (i = 0; i < len; i += 1) {
                k = keys[i];
                m[k] = obj[k];
            }
            return m.toXml();
        };
    
    
        sforce.metadata = new sforce.MetadataConnection();
        sforce.metadata.serverUrl = "/services/Soap/m/26.0";
        sforce.metadata.sessionId = sforce.connection.sessionId;
    
    
    }());
        
        
        /*************************** end salesforce-metadata.js **/
        var text;
        var extractionDt;
        
        function renderAsText() {
            
            var textList = text.split('<br/>');
            textList.sort();
            text = '<style> body { font-family: "Lucida Console", Monaco, monospace; }</style>';
            
            text += '<body>Metadata extraction results as at '+extractionDt+'<br/>';
            if(document.getElementById('dt').value > '') text += 'Modified or created at or after '+document.getElementById('dt').value + '<br/><br/>';
            for(var i=0; i<textList.length; i++) { text += textList[i] + '<br/>'; }
            text += '</body>';
            presentText();
        }
        
        function renderAsPackageXML(){
            var textList = text.split('<br/>');
            textList.sort();
            text = '<style> body { font-family: "Lucida Console", Monaco, monospace; }</style>';
            text += '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;Package xmlns=\"http://soap.sforce.com/2006/04/metadata\"&gt;<br/>';
            var prev = '';
            var sp = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
            for(var i=0; i<textList.length; i++){
                var typ = textList[i].substring(0,textList[i].indexOf('.'));
                var member = textList[i].substring(textList[i].indexOf('.')+1,textList[i].length);
                if(prev != typ) {
                    if(prev != '') text += sp +'&lt;/types&gt;<br/>';
                    prev = typ;
                    if(i < textList.length -1 ) text += sp + '&lt;types&gt;<br/>';
                    text += sp + sp + '&lt;name&gt;' + typ + '&lt;/name&gt;<br/>';
                }
                // add member 
                if(member > '') text += sp + sp + sp + '&lt;members&gt;' + member + '&lt;/members&gt;<br/>'; 
                
            }
            text += sp + '&lt;/types&gt;<br/>';
            text += '&lt;/Package&gt;';
            
            presentText();
        }
        
        function presentText(){
            newwindow=window.open();
            newdocument=newwindow.document;
            newdocument.write(text);
        }
        
        function metaRequest(param){
            this.type = param;
        }
        
        function formatDate(param){
            return param.substring(0,param.indexOf('T'));
        }
        
        function submitRequest(){
           extractionDt = new Date();
           //document.getElementsByClassName('btn').style.display = "none";
           document.getElementById('result').innerHTML = "";
           var selectVals = document.getElementById('objects');
           var selected = [];
           for(var s=0; s<selectVals.length; s++){
                if(selectVals.options[s].selected) {
                    selected.push(new metaRequest(selectVals.options[s].value));
                }
           }
           var targetArray = selected;  
           var ind = 0;
           text = '';
           while(ind < selected.length){
                  var targetArray = []; // work in maximum of 3 type requests per call
                  targetArray.push(selected[ind]);
                  if(ind+1 < selected.length) targetArray.push(selected[ind+1]);
                  if(ind+2 < selected.length) targetArray.push(selected[ind+2]);
                  
                  sforce.metadata.listMetadata( {queries: targetArray, asOfVersion: 33},
                        function (results) {
                            var dt = document.getElementById('dt').value;
                            for(var i=0; i<results.length; i++){
                                if(dt == '' || ( dt > '' && (dt < results[i].lastModifiedDate || dt < results[i].createdDate))){
                                    if(document.getElementById(results[i].type) == null){
                                        var topNode = document.getElementById('result');
                                        var typeNode = document.createElement('UL');
                                        typeNode.setAttribute('id',results[i].type);
                                        var textNode = document.createTextNode(results[i].type);
                                        typeNode.appendChild(textNode);
                                        topNode.appendChild(typeNode);
                                    } 
                                    var typeNode = document.getElementById(results[i].type);
                                    // now append the object detail
                                    var fileNode = document.createElement('LI');
                                    var reason = '';
                                    if(dt > ''){
                                        reason += ( dt < results[i].lastModifiedDate ) ? ', modified '+formatDate(results[i].lastModifiedDate) : '';
                                        reason += ( dt < results[i].createdDate ) ? ', created '+formatDate(results[i].createdDate) : '';
                                    }
                                    var textNode = document.createTextNode(results[i].fullName + reason);
                                    text += results[i].type+'.'+results[i].fullName + '<br/>';
                                    fileNode.appendChild(textNode);
                                    typeNode.appendChild(fileNode);
                                }
                            }
                           
                        }
                
                    );
                ind= ind + 3; 
            }
            //document.getElementsByClassName('btn').style.display = "block";
        }
          
        sforce.metadata.describeMetadata(33,function (response) {
            var optionsList = [];
            for(var i=0; i<response.metadataObjects.length; i++){
                optionsList.push(response.metadataObjects[i].xmlName);
                if(response.metadataObjects[i].childXmlNames != undefined){
                    var childXmlNames = response.metadataObjects[i].childXmlNames;
                    optionsList = optionsList.concat(childXmlNames);
                    
                }
                optionsList.sort();
            }
            // now build select out
            var selectNode = document.getElementById('objects');
            for(var i=0; i<optionsList.length; i++){
                var optionNode = document.createElement('OPTION');
                optionNode.setAttribute('value',optionsList[i]);
                var textNode = document.createTextNode(optionsList[i]);
                optionNode.appendChild(textNode);
                selectNode.appendChild(optionNode); 
                
            }
        });
        
        
        
    </script>
</apex:page>